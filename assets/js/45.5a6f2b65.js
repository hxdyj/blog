(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{594:function(s,a,e){"use strict";e.r(a);var n=e(42),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[s._v("#")]),s._v(" 镜像")]),s._v(" "),e("h3",{attrs:{id:"查看所有的镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看所有的镜像"}},[s._v("#")]),s._v(" 查看所有的镜像")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker images ls\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"删除镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像"}},[s._v("#")]),s._v(" 删除镜像")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker image rm [imageName]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[s._v("#")]),s._v(" 容器")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker container ls #列出本机运行的容器\ndocker container ls --all # 列出本机所有容器，包括终止运行的容器\ndocker container run hello-world  #运行完就停止\ndocker container run -it ubuntu bash #服务类型（需手动停止）\ndocker container kill [containID] #手动停止容器\ndocker container rm [containerID] # 删除容器，终止运行的容器文件，依然会占据硬盘空间。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"运行命令详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行命令详解"}},[s._v("#")]),s._v(" 运行命令详解")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker container run\nocker container run -p 8000:3000 -it koa-demo /bin/bash\ndocker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash\n#-p参数：容器的 3000 端口映射到本机的 8000 端口。\n#-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。\n#--rm参数：容器终止运行后自动删除容器文件。\n#koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。\n#/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。\n# --network host|bridge|none 默认是bridge，即桥接网络，以桥接模式连接到宿主机；host是宿主网络，即与宿主机共用网络；none则表示无网络，容器将无法联网。当容器使用host网络时，容器与宿主共用网络，这样就能在容器中访问宿主机网络，那么容器的localhost就是宿主机的localhost。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h2",{attrs:{id:"启动-ngnix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动-ngnix"}},[s._v("#")]),s._v(" 启动 ngnix")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('docker container run --name testnginx --volume "$PWD/html":/usr/share/nginx/html --volume "$PWD/ngnix-config/nginx":/etc/nginx -p 8887:80 -d nginx\n\n# "$PWD/html":/usr/share/nginx/html 把当前工作路径子目录html，映射到容器的网页文件目录/usr/share/nginx/html\n\ndocker container cp mynginx:/etc/nginx .\n# 把mynginx容器的/etc/nginx拷贝到当前目录。不要漏掉最后那个点。\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"如何解决-docker-内部访问不了宿主机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何解决-docker-内部访问不了宿主机"}},[s._v("#")]),s._v(" 如何解决 docker 内部访问不了宿主机")]),s._v(" "),e("blockquote",[e("p",[s._v("在防火墙开启的状态下，docker 容器内部无法访问宿主机服务（能够访问非宿主机的其他局域网计算机的服务），解决方法：")])]),s._v(" "),e("p",[s._v("_补充：由于容器内请求的源地址是使用的 docker0 网段的内网地址，宿主机防火墙无法识别来源为非宿主机网段的 docker0 网段的内网地址请求，将其标记为未知来源，于是对请求进行了拦截，可通过添加防火墙来源规则（docker 容器默认内网网段为 172.17.0.0/16）：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ip addr show # 查看docker0的转发网络地址和端口\nsudo ufw allow from 172.17.0.0/16 #允许所有RFC1918网络（局域网/无线局域网的）访问这个主机\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"raspberry-内置的防火墙-ufw-设置和启用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#raspberry-内置的防火墙-ufw-设置和启用"}},[s._v("#")]),s._v(" Raspberry，内置的防火墙 ufw 设置和启用")]),s._v(" "),e("h3",{attrs:{id:"启用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启用"}},[s._v("#")]),s._v(" 启用")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("sudo ufw enable\nsudo ufw default deny\n# 作用：开启了防火墙并随系统启动同时关闭所有外部对本机的访问（本机访问外部正常）。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"关闭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关闭"}},[s._v("#")]),s._v(" 关闭")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("sudo ufw disable\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"查看状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看状态"}},[s._v("#")]),s._v(" 查看状态")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("sudo ufw status\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"开启-禁用相应端口或服务举例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开启-禁用相应端口或服务举例"}},[s._v("#")]),s._v(" 开启/禁用相应端口或服务举例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("sudo ufw allow 80 #允许外部访问80端口\nsudo ufw delete allow 80 #禁止外部访问80\nsudo ufw allow from 192.168.1.1 #允许此IP访问所有的本机端口\nsudo ufw deny smtp #禁止外部访问smtp服务\nsudo ufw delete allow smtp #删除上面建立的某条规则\nufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port #要拒绝所有的流量从TCP的10.0.0.0/8 到端口22的地址192.168.0.1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);