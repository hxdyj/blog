(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{571:function(n,e,t){"use strict";t.r(e);var s=t(42),r=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"css-盒子模型-链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-盒子模型-链接"}},[n._v("#")]),n._v(" CSS 盒子模型 "),t("a",{attrs:{href:"https://baike.baidu.com/item/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/9814562?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[n._v("链接"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("标准盒模型 content-box\n怪异盒模型 border-box")]),n._v(" "),t("p",[n._v("块级盒子 Block Box & 内联盒子 Inline Box")]),n._v(" "),t("p",[n._v("块级盒子 Block Box：")]),n._v(" "),t("ul",[t("li",[n._v("Content box")]),n._v(" "),t("li",[n._v("Padding box")]),n._v(" "),t("li",[n._v("Border box")]),n._v(" "),t("li",[n._v("Margin box")])]),n._v(" "),t("p",[n._v("一个被定义成块级的（block）盒子会表现出以下行为:")]),n._v(" "),t("ul",[t("li",[n._v("盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽")]),n._v(" "),t("li",[n._v("每个盒子都会换行")]),n._v(" "),t("li",[n._v("width 和 height 属性可以发挥作用")]),n._v(" "),t("li",[n._v("内边距（padding）, 外边距（margin） 和 边框（border） 会将其他元素从当前盒子周围“推开”")])]),n._v(" "),t("p",[n._v("如果一个盒子对外显示为 inline，那么他的行为如下:")]),n._v(" "),t("ul",[t("li",[n._v("盒子不会产生换行。")]),n._v(" "),t("li",[n._v("width 和 height 属性将不起作用。")]),n._v(" "),t("li",[n._v("内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开。")])]),n._v(" "),t("p",[n._v("display有一个特殊的值，它在内联和块之间提供了一个中间状态。这对于以下情况非常有用:您不希望一个项切换到新行，但希望它可以设定宽度和高度，并避免上面看到的重叠。")]),n._v(" "),t("p",[n._v("一个元素使用 display: inline-block，实现我们需要的块级的部分效果：")]),n._v(" "),t("ul",[t("li",[n._v("设置width 和height 属性会生效。")]),n._v(" "),t("li",[n._v("padding, margin, 以及border 会推开其他元素。")])]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("box-sizing")]),n._v(" "),t("a",{attrs:{href:"http://www.jianshu.com/p/e2eb0d8c9de6",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考"),t("OutboundLink")],1)])]),n._v(" "),t("p",[t("a",{attrs:{href:"https://www.w3.org/TR/CSS22/box.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("翻墙"),t("OutboundLink")],1)]),n._v(" "),t("ol",[t("li",[n._v("content-box：标准盒模型，CSS 定义的宽高只包含 content 的宽高")]),n._v(" "),t("li",[n._v("border-box：IE 盒模型，CSS 定义的宽高包括了 content，padding 和 border")])]),n._v(" "),t("h2",{attrs:{id:"javascript-原型与原型链-链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-原型与原型链-链接"}},[n._v("#")]),n._v(" Javascript 原型与原型链 "),t("a",{attrs:{href:"http://www.jianshu.com/p/dee9f8b14771",target:"_blank",rel:"noopener noreferrer"}},[n._v("链接"),t("OutboundLink")],1)]),n._v(" "),t("h3",{attrs:{id:"普通对象和函数对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通对象和函数对象"}},[n._v("#")]),n._v(" 普通对象和函数对象")]),n._v(" "),t("blockquote",[t("p",[n._v("JavaScript 中，万物皆对象！但对象也是有区别的。分为普通对象和函数对象")])]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",[n._v("普通对象")]),n._v(" "),t("th",[n._v("函数对象")])])]),n._v(" "),t("tbody",[t("tr",[t("td",[n._v("var o1 = {};")]),n._v(" "),t("td",[n._v("function f1(){};")])]),n._v(" "),t("tr",[t("td",[n._v("var o2 =new Object();")]),n._v(" "),t("td",[n._v("var f2 = function(){};")])]),n._v(" "),t("tr",[t("td",[n._v("var o3 = new f1();")]),n._v(" "),t("td",[n._v("var f3 = new Function('str','console.log(str)');")])])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("console.log(typeof Object); //function\nconsole.log(typeof Function); //function\n\nconsole.log(typeof f1); //function\nconsole.log(typeof f2); //function\nconsole.log(typeof f3); //function\n\nconsole.log(typeof o1); //object\nconsole.log(typeof o2); //object\nconsole.log(typeof o3); //object\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("p",[n._v("o1 o2 o3 为普通对象，f1 f2 f3 为函数对象。\n凡是通过 new Function() 创建的对象都是函数对象，其他的都是普通对象。f1,f2,归根结底都是通过 new Function()的方式进行创建的。Function Object 也都是通过 New Function()创建的。")]),n._v(" "),t("h3",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[n._v("#")]),n._v(" 构造函数")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(name, age, job) {\n this.name = name;\n this.age = age;\n this.job = job;\n this.sayName = function() { alert(this.name) }\n}\nvar person1 = new Person('Zaxlct', 28, 'Software Engineer');\nvar person2 = new Person('Mick', 23, 'Doctor');\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("p",[n._v("person1 和 person2 都是 Person 的实例。这两个实例都有一个 constructor （构造函数）属性，该属性（是一个指针）指向 Person。 即：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  console.log(person1.constructor == Person); //true\n  console.log(person2.constructor == Person); //true\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("p",[n._v("我们要记住两个概念（"),t("strong",[n._v("构造函数，实例")]),n._v("）：\nperson1 和 person2 都是 (构造函数 Person[函数对象]) 的**实例\n**\n"),t("strong",[n._v("一个公式")]),n._v("：实例的构造函数属性（constructor）指向构造函数。")]),n._v(" "),t("h3",{attrs:{id:"原型对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[n._v("#")]),n._v(" 原型对象")]),n._v(" "),t("blockquote",[t("p",[n._v("在 JavaScript 中，每当定义一个对象（"),t("strong",[n._v("函数也是对象")]),n._v("）时候，对象中都会包含一些预定义的属性。其中每个"),t("strong",[n._v("函数对象")]),n._v("都有一个"),t("strong",[n._v("prototype 属性")]),n._v("，这个属性指向函数的"),t("strong",[n._v("原型对象")]),n._v("。\n**公式：**每个对象都有 "),t("strong",[n._v("proto")]),n._v(" 属性，但只有函数对象才有 prototype 属性")])]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/js%E5%8E%9F%E5%9E%8B%E9%93%BE.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person() {}\nPerson.prototype.name = 'Zaxlct';\nPerson.prototype.age  = 28;\nPerson.prototype.job  = 'Software Engineer';\nPerson.prototype.sayName = function() {\n  alert(this.name);\n}\n\nvar person1 = new Person();\nperson1.sayName(); // 'Zaxlct'\n\nvar person2 = new Person();\nperson2.sayName(); // 'Zaxlct'\n\nconsole.log(person1.sayname == person2.sayname); //true\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br")])]),t("p",[n._v("改写：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Person.prototype = {\n   name:  'Zaxlct',\n   age: 28,\n   job: 'Software Engineer',\n   sayName: function() {\n     alert(this.name);\n   }\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("p",[t("strong",[n._v("原型对象就是 Person.prototype")]),n._v("\n在上面我们给 A 添加了 四个属性：name、age、job、sayName。其实它还有一个默认的属性："),t("strong",[n._v("constructor")])]),n._v(" "),t("blockquote",[t("p",[n._v("在默认情况下，所有的原型对象都会自动获得一个 constructor（构造函数）属性，这个属性（是一个指针）指向 prototype 属性所在的函数（"),t("strong",[n._v("Person")]),n._v("）")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Person.prototype.constructor == Person\nperson1.constructor == Person //上边例子中 person1实例\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("p",[n._v("person1 为什么有 constructor 属性？那是因为 person1 是 Person 的实例。\n那 Person.prototype 为什么有 constructor 属性？？同理， Person.prototype （你把它想象成 A） 也是 Person 的实例。\n也就是在 Person 创建的时候，创建了一个它的实例对象并赋值给它的 prototype，基本过程如下：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" var A = new Person();\n Person.prototype = A;\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("p",[n._v("**可以理解为：**原型对象（Person.prototype）是 构造函数（Person）的一个实例。\n**结论：**高程红宝书说，构造函数的原型对象并不是构造函数的一个实例。只是构造函数的一个属性，这个属性是自动获得的。")]),n._v(" "),t("p",[n._v("原型对象其实就是普通对象（但 Function.prototype 除外，它是函数对象，但它很特殊，他没有 prototype 属性（前面说道函数对象都有 prototype 属性））。看下面的例子：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(){};\n console.log(Person.prototype) //Person{}\n console.log(typeof Person.prototype) //Object\n console.log(typeof Function.prototype) // Function，这个特殊\n console.log(typeof Object.prototype) // Object\n console.log(typeof Function.prototype.prototype) //undefined\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("p",[n._v("**结论：**所有函数对象的 "),t("strong",[n._v("proto")]),n._v(" 都指向 Function.prototype，它是一个 javascript "),t("strong",[n._v("native 函数")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("extend: function(Child, Parent) {\n    function Ctor() {\n      this.constructor = Child;\n    }\n    Ctor.prototype = Parent.prototype;\n    Child.prototype = new Ctor();\n    Child.super_ = Parent.prototype;\n  },\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("h2",{attrs:{id:"target-和-currenttarget-参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#target-和-currenttarget-参考"}},[n._v("#")]),n._v(" target 和 currentTarget "),t("a",{attrs:{href:"https://www.cnblogs.com/54td/p/5936816.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"dom-hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-hash"}},[n._v("#")]),n._v(" DOM hash")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://www.w3school.com.cn/jsref/prop_loc_hash.asp",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考 1"),t("OutboundLink")],1),n._v(" "),t("a",{attrs:{href:"http://blog.csdn.net/somanygenius/article/details/48000285",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考 2"),t("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);